{"ast":null,"code":"import _classCallCheck from\"/Users/mathubabocra.org.bw/Downloads/MedliveryMasterUpdated-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/mathubabocra.org.bw/Downloads/MedliveryMasterUpdated-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/mathubabocra.org.bw/Downloads/MedliveryMasterUpdated-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/mathubabocra.org.bw/Downloads/MedliveryMasterUpdated-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Form,Button,Alert}from'react-bootstrap';import{connect}from'react-redux';import{Field,reduxForm}from'redux-form';import validator from'validator';import DoctorCertUpload from'./uploadCertOfPractice';import CopyOfIdUploader from'./doctorCopyId';import bsCustomFileInput from'bs-custom-file-input';import{doctorSignUpActionCreator}from'../actions/doctorSignUpActionCreator';var DoctorBiography=/*#__PURE__*/function(_Component){_inherits(DoctorBiography,_Component);var _super=_createSuper(DoctorBiography);function DoctorBiography(){var _this;_classCallCheck(this,DoctorBiography);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.renderHelperCategory=function(_ref){var input=_ref.input,type=_ref.type,label=_ref.label,controlId=_ref.controlId,className=_ref.className,placeholder=_ref.placeholder,required=_ref.required,accept=_ref.accept,meta=_ref.meta,error=_ref.error,as=_ref.as,maxDate=_ref.maxDate;console.log('meta ',meta);return/*#__PURE__*/React.createElement(\"div\",{className:className},/*#__PURE__*/React.createElement(Form.Group,{controlId:controlId},/*#__PURE__*/React.createElement(Form.Label,null,label),/*#__PURE__*/React.createElement(Form.Control,Object.assign({required:true},input,{type:type,placeholder:placeholder,as:as//  max={maxDate}\n}),/*#__PURE__*/React.createElement(\"option\",null,\"General Physician \"),/*#__PURE__*/React.createElement(\"option\",null,\"Cardiologist\"),/*#__PURE__*/React.createElement(\"option\",null,\"Neurosurgeon\"),/*#__PURE__*/React.createElement(\"option\",null,\"Oncologist\"),/*#__PURE__*/React.createElement(\"option\",null,\"Orthopaedic Surgeon\"),/*#__PURE__*/React.createElement(\"option\",null,\"Neurologist\"),/*#__PURE__*/React.createElement(\"option\",null,\"Gastroenterologist\"),/*#__PURE__*/React.createElement(\"option\",null,\"ENT\"),/*#__PURE__*/React.createElement(\"option\",null,\"Dentist\"),/*#__PURE__*/React.createElement(\"option\",null,\"Psychiatrist\"),/*#__PURE__*/React.createElement(\"option\",null,\"Urologist\"),/*#__PURE__*/React.createElement(\"option\",null,\"Gynecologits\"),/*#__PURE__*/React.createElement(\"option\",null,\"Pediatrician\")),_this.renderError(meta)));};_this.renderHelperGender=function(_ref2){var input=_ref2.input,type=_ref2.type,label=_ref2.label,controlId=_ref2.controlId,className=_ref2.className,placeholder=_ref2.placeholder,required=_ref2.required,accept=_ref2.accept,meta=_ref2.meta,as=_ref2.as,error=_ref2.error,maxDate=_ref2.maxDate;console.log('meta ',meta);return/*#__PURE__*/React.createElement(\"div\",{className:className},/*#__PURE__*/React.createElement(Form.Group,{controlId:controlId},/*#__PURE__*/React.createElement(Form.Label,null,label),/*#__PURE__*/React.createElement(Form.Control,Object.assign({required:true},input,{type:type,placeholder:placeholder,as:as//  max={maxDate}\n}),/*#__PURE__*/React.createElement(\"option\",null,\"Male \"),/*#__PURE__*/React.createElement(\"option\",null,\"Female\")),_this.renderError(meta)));};_this.renderHelper=function(_ref3){var input=_ref3.input,type=_ref3.type,label=_ref3.label,controlId=_ref3.controlId,className=_ref3.className,placeholder=_ref3.placeholder,required=_ref3.required,accept=_ref3.accept,meta=_ref3.meta,error=_ref3.error,maxDate=_ref3.maxDate;console.log('meta ',meta);return/*#__PURE__*/React.createElement(\"div\",{className:className},/*#__PURE__*/React.createElement(Form.Group,{controlId:controlId},/*#__PURE__*/React.createElement(Form.Label,null,label),/*#__PURE__*/React.createElement(Form.Control,Object.assign({required:true},input,{type:type,placeholder:placeholder//  max={maxDate}\n})),_this.renderError(meta)));};return _this;}_createClass(DoctorBiography,[{key:\"componentDidMount\",value:function componentDidMount(){bsCustomFileInput.init();}},{key:\"renderError\",value:function renderError(_ref4){var error=_ref4.error,touched=_ref4.touched;if(error&&touched){return/*#__PURE__*/React.createElement(\"div\",{className:\"\"},/*#__PURE__*/React.createElement(Alert,{variant:\"danger\"},error));}}},{key:\"onSubmit\",value:function onSubmit(formValues){var _this2=this;console.log(formValues);this.props.doctorSignUpActionCreator(formValues,function(){_this2.props.history.push('/selectGroup');});}},{key:\"render\",value:function render(){var handleSubmit=this.props.handleSubmit;return/*#__PURE__*/React.createElement(\"div\",{className:\"container mt-5 mb-5\"},/*#__PURE__*/React.createElement(\"h3\",{className:\"text-center text-secondary mb-5\"},\"Doctor's Profile\"),/*#__PURE__*/React.createElement(Form,{encType:\"multipart/form-data\",onSubmit:handleSubmit(this.onSubmit.bind(this))},/*#__PURE__*/React.createElement(Form.Row,null,/*#__PURE__*/React.createElement(Field,{name:\"qualification\",label:\"Qualification\",component:this.renderHelper,type:\"text\",required:\"required\",placeholder:\"e.g MBBS,DNB(Neurology)\",controlId:\"formGroupQualification\",className:\"col-md-4\"}),/*#__PURE__*/React.createElement(Field,{name:\"department\",label:\"Department\",component:this.renderHelper,type:\"text\",required:\"required\",placeholder:\"e.g Neurosurgeon\",controlId:\"formGroupDepartment\",className:\"col-md-4\"}),/*#__PURE__*/React.createElement(Field,{name:\"speciality\",label:\"Speciality\",component:this.renderHelper,type:\"text\",required:\"required\",placeholder:\"e.g Neurosurgery\",controlId:\"formGroupSpeciality\",className:\"col-md-4\"})),/*#__PURE__*/React.createElement(Form.Row,null,/*#__PURE__*/React.createElement(Field,{name:\"locality\",label:\"Locality\",component:this.renderHelper,type:\"text\",required:\"required\",placeholder:\"e.g Gaborone,Botswana\",controlId:\"formGroupLocality\",className:\"col-md-4\"}),/*#__PURE__*/React.createElement(Field,{name:\"consultantIn\",label:\"Consultant In\",component:this.renderHelper,type:\"text\",required:\"required\",placeholder:\"e.g Kalafhi Private Hospital\",controlId:\"formGroupConsultantIn\",className:\"col-md-4\"}),/*#__PURE__*/React.createElement(Field,{name:\"category\",label:\"Category\",component:this.renderHelperCategory,type:\"select\",as:\"select\",required:\"required\",placeholder:\"Category\",controlId:\"formGroupCategory\",className:\"col-md-4\"})),/*#__PURE__*/React.createElement(Form.Row,null,/*#__PURE__*/React.createElement(Field,{name:\"experience\",label:\"Years Of Experience\",component:this.renderHelper,type:\"text\",required:\"required\",placeholder:\"e.g 6 years\",controlId:\"formGroupExperience\",className:\"col-md-4\"})),/*#__PURE__*/React.createElement(Form.Row,null),/*#__PURE__*/React.createElement(Form.Row,null,/*#__PURE__*/React.createElement(Button,{className:\"container col-md-4 mt-5\",type:\"submit\",variant:\"success\"},' ',\"Add\",' '))));}}]);return DoctorBiography;}(Component);function validate(values){var error={};if(!values.firstname){error.firstname='Field is Required';}else if(values.firstname){if(!validator.isAlpha(values.firstname)){error.firstname='Name Cannot Contain numbers,symbols or special Characters';}}if(!values.middlename){error.middlename='Field is Required';}else if(values.middlename){if(!validator.isAlpha(values.middlename)){error.middlename='Name Cannot Contain numbers,symbols or special Characters';}}if(!values.lastname){error.lastname='Field is Required';}else if(values.lastname){if(!validator.isAlpha(values.lastname)){error.lastname='Name Cannot Contain numbers,symbols or special Characters';}}if(!values.password){error.password='Field is Required';}else if(values.password){}if(!values.passwordConfirm){error.passwordConfirm='Field is Required';}else if(values.passwordConfirm){if(!validator.equals(values.passwordConfirm,values.password)){error.passwordConfirm='Passwords do not Match';}}if(!values.phoneNumber){error.phoneNumber='Field is Required';}if(!values.dateOfBirth){error.dateOfBirth='Field is Required';}if(!values.copyOfId){error.copyOfId='Field is Required';}if(!values.physicalAddress){error.physicalAdress='Field is Required';}if(!values.email){error.email='Field is Required';}else if(values.email){var validEmail=validator.isEmail(values.email);if(!validEmail){error.email='Invalid Email';}}//console.log('Error ', errors)\nreturn error;}export default reduxForm({form:'doctorSignUpForm',destroyOnUnmount:true,forceUnregisterOnUnmount:true,validate:validate})(connect(null,{doctorSignUpActionCreator:doctorSignUpActionCreator})(DoctorBiography));","map":{"version":3,"sources":["/Users/mathubabocra.org.bw/Downloads/MedliveryMasterUpdated-main/src/Components/doctorsBio.js"],"names":["React","Component","Form","Button","Alert","connect","Field","reduxForm","validator","DoctorCertUpload","CopyOfIdUploader","bsCustomFileInput","doctorSignUpActionCreator","DoctorBiography","renderHelperCategory","input","type","label","controlId","className","placeholder","required","accept","meta","error","as","maxDate","console","log","renderError","renderHelperGender","renderHelper","init","touched","formValues","props","history","push","handleSubmit","onSubmit","bind","validate","values","firstname","isAlpha","middlename","lastname","password","passwordConfirm","equals","phoneNumber","dateOfBirth","copyOfId","physicalAddress","physicalAdress","email","validEmail","isEmail","form","destroyOnUnmount","forceUnregisterOnUnmount"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Form, Button,Alert } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport validator from 'validator'\r\n\r\nimport DoctorCertUpload from './uploadCertOfPractice'\r\nimport CopyOfIdUploader from './doctorCopyId'\r\nimport bsCustomFileInput from 'bs-custom-file-input';\r\n\r\nimport { doctorSignUpActionCreator } from '../actions/doctorSignUpActionCreator';\r\n\r\nclass DoctorBiography extends Component {\r\n\r\n\r\n  componentDidMount() {\r\n    bsCustomFileInput.init();\r\n  }\r\n\r\n  renderError({ error, touched }) {\r\n    if (error && touched) {\r\n      return (\r\n        <div className=''>\r\n          <Alert variant='danger'>{error}</Alert>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  renderHelperCategory = ({\r\n    input,\r\n    type,\r\n    label,\r\n    controlId,\r\n    className,\r\n    placeholder,\r\n    required,\r\n    accept,\r\n    meta,\r\n    error,\r\n    as,\r\n    maxDate,\r\n  }) => {\r\n    console.log('meta ', meta);\r\n\r\n    return (\r\n      <div className={className}>\r\n        <Form.Group controlId={controlId}>\r\n          <Form.Label>{label}</Form.Label>\r\n          <Form.Control\r\n            required\r\n            {...input}\r\n            type={type}\r\n            placeholder={placeholder}\r\n            as={as}\r\n            //  max={maxDate}\r\n          >\r\n               <option>General Physician </option>\r\n\r\n<option>Cardiologist</option>\r\n<option>Neurosurgeon</option>\r\n<option>Oncologist</option>\r\n<option>Orthopaedic Surgeon</option>\r\n<option>Neurologist</option>\r\n<option>Gastroenterologist</option>\r\n<option>ENT</option>\r\n<option>Dentist</option>\r\n<option>Psychiatrist</option>\r\n<option>Urologist</option>\r\n<option>Gynecologits</option>\r\n<option>Pediatrician</option>\r\n          </Form.Control>\r\n\r\n          {this.renderError(meta)}\r\n        </Form.Group>\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\n\r\n  renderHelperGender = ({\r\n    input,\r\n    type,\r\n    label,\r\n    controlId,\r\n    className,\r\n    placeholder,\r\n    required,\r\n    accept,\r\n    meta,\r\n    as,\r\n    error,\r\n    maxDate,\r\n  }) => {\r\n    console.log('meta ', meta);\r\n\r\n    return (\r\n      <div className={className}>\r\n        <Form.Group controlId={controlId}>\r\n          <Form.Label>{label}</Form.Label>\r\n          <Form.Control\r\n            required\r\n            {...input}\r\n            type={type}\r\n            placeholder={placeholder}\r\n            as={as}\r\n            //  max={maxDate}\r\n          >\r\n            <option>Male </option>\r\n\r\n<option>Female</option>\r\n          </Form.Control>\r\n\r\n          {this.renderError(meta)}\r\n        </Form.Group>\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\n  renderHelper = ({\r\n    input,\r\n    type,\r\n    label,\r\n    controlId,\r\n    className,\r\n    placeholder,\r\n    required,\r\n    accept,\r\n    meta,\r\n    error,\r\n    maxDate,\r\n  }) => {\r\n    console.log('meta ', meta);\r\n\r\n    return (\r\n      <div className={className}>\r\n        <Form.Group controlId={controlId}>\r\n          <Form.Label>{label}</Form.Label>\r\n          <Form.Control\r\n            required\r\n            {...input}\r\n            type={type}\r\n            placeholder={placeholder}\r\n            //  max={maxDate}\r\n          />\r\n\r\n          {this.renderError(meta)}\r\n        </Form.Group>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  onSubmit(formValues) {\r\n    console.log(formValues);\r\n\r\n    this.props.doctorSignUpActionCreator(formValues, () => {\r\n      this.props.history.push('/selectGroup');\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { handleSubmit } = this.props;\r\n\r\n    return (\r\n      <div className='container mt-5 mb-5'>\r\n        <h3 className='text-center text-secondary mb-5'>Doctor's Profile</h3>\r\n        <Form\r\n          encType='multipart/form-data'\r\n          onSubmit={handleSubmit(this.onSubmit.bind(this))}\r\n        >\r\n          <Form.Row>\r\n            <Field\r\n              name='qualification'\r\n              label='Qualification'\r\n              component={this.renderHelper}\r\n              type='text'\r\n              required='required'\r\n              placeholder='e.g MBBS,DNB(Neurology)'\r\n              controlId='formGroupQualification'\r\n              className='col-md-4'\r\n              \r\n              />\r\n            \r\n            <Field\r\n              name='department'\r\n              label='Department'\r\n              component={this.renderHelper}\r\n              type='text'\r\n              required='required'\r\n              placeholder='e.g Neurosurgeon'\r\n              controlId='formGroupDepartment'\r\n              className='col-md-4'\r\n              \r\n              />\r\n             \r\n            <Field\r\n              name='speciality'\r\n              label='Speciality'\r\n              component={this.renderHelper}\r\n              type='text'\r\n              required='required'\r\n              placeholder='e.g Neurosurgery'\r\n              controlId='formGroupSpeciality'\r\n              className='col-md-4'\r\n              \r\n              />\r\n             \r\n            {/* <div className='col-md-6'>\r\n      \r\n               <Form.Group>\r\n                 <Form.Label>Location</Form.Label>\r\n                     <Form.Control as='select' placeholder='Select Hospital'>\r\n                       <option>Select Hospital</option>\r\n      \r\n                       <option>Kalafhi Private Hospital</option>\r\n                       <option>Gaborone Private Hospital</option>\r\n                       <option>Bokamoso Private Hospital</option>\r\n                       <option>Sidilega Private Hospital</option>\r\n                       <option>AO Private Clinic</option>\r\n                     </Form.Control>\r\n                   </Form.Group>\r\n      </div> */}\r\n          </Form.Row>\r\n\r\n          <Form.Row>\r\n              <Field\r\n              name='locality'\r\n              label='Locality'\r\n              component={this.renderHelper}\r\n              type='text'\r\n              required='required'\r\n              placeholder='e.g Gaborone,Botswana'\r\n              controlId='formGroupLocality'\r\n              className='col-md-4'\r\n              \r\n              />\r\n              \r\n\r\n            <Field\r\n              name='consultantIn'\r\n              label='Consultant In'\r\n              component={this.renderHelper}\r\n              type='text'\r\n              required='required'\r\n              placeholder='e.g Kalafhi Private Hospital'\r\n              controlId='formGroupConsultantIn'\r\n              className='col-md-4'\r\n              \r\n              />\r\n              \r\n            {/* <div className='col-md-4'> */}\r\n            <Field\r\n              name='category'\r\n              label='Category'\r\n              component={this.renderHelperCategory}\r\n              type='select'\r\n              as='select'\r\n              required='required'\r\n              placeholder='Category'\r\n              controlId='formGroupCategory'\r\n              className='col-md-4'\r\n              \r\n              />\r\n              {/* <Form.Group>\r\n                <Form.Label>Category</Form.Label>\r\n                <Form.Control as='select' placeholder='Category'>\r\n                  <option>General Physician </option>\r\n\r\n                  <option>Cardiologist</option>\r\n                  <option>Neurosurgeon</option>\r\n                  <option>Oncologist</option>\r\n                  <option>Orthopaedic Surgeon</option>\r\n                  <option>Neurologist</option>\r\n                  <option>Gastroenterologist</option>\r\n                  <option>ENT</option>\r\n                  <option>Dentist</option>\r\n                  <option>Psychiatrist</option>\r\n                  <option>Urologist</option>\r\n                  <option>Gynecologits</option>\r\n                  <option>Pediatrician</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </div> */}\r\n          </Form.Row>\r\n          <Form.Row>\r\n            {/* <div className='col-md-4'> */}\r\n            <Field\r\n              name='experience'\r\n              label='Years Of Experience'\r\n              component={this.renderHelper}\r\n              type='text'\r\n              required='required'\r\n              placeholder='e.g 6 years'\r\n              controlId='formGroupExperience'\r\n              className='col-md-4'\r\n              \r\n              />\r\n              {/* <Form.Group>\r\n                <Form.Label>Gender</Form.Label>\r\n                <Form.Control as='select' placeholder='Gender'>\r\n                  <option>Male </option>\r\n\r\n                  <option>Female</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </div> */}\r\n{/* \r\n            <Field\r\n              name='mobileNumber'\r\n              label='Mobile Number'\r\n              component={this.renderHelper}\r\n              type='text'\r\n              required='required'\r\n              placeholder='Mobile Number'\r\n              controlId='formGroupMobileNumber'\r\n              className='col-md-4'\r\n              \r\n              />\r\n             \r\n            <Field\r\n              name='physicalAddress'\r\n              label='Physical Address'\r\n              component={this.renderHelper}\r\n              type='text'\r\n              required='required'\r\n              placeholder='Physical Address'\r\n              controlId='formGroupPhysicalAddress'\r\n              className='col-md-4'\r\n              \r\n              /> */}\r\n             \r\n          </Form.Row>\r\n{/* \r\n          <Form.Row>\r\n          <Field\r\n                        name='dateOfBirth'\r\n                        type='date'\r\n                        required='required'\r\n                        label='Date Of Birth'\r\n                        max={this.maxDate}\r\n                        min={this.minDate}\r\n                        component={this.renderHelper}\r\n                        placeholder='Enter DOB'\r\n                        controlId='formGroupDOB'\r\n                        className='col-md-4'\r\n                      />\r\n            <Field\r\n              name='password'\r\n              label='Password'\r\n              component={this.renderHelper}\r\n              type='password'\r\n              required='required'\r\n              placeholder='Password'\r\n              controlId='formGroupPassword'\r\n              className='col-md-4'\r\n              \r\n              />\r\n            \r\n\r\n            <Field\r\n              name='confirmPassword'\r\n              label='Password'\r\n              component={this.renderHelper}\r\n              type='password'\r\n              required='required'\r\n              placeholder='Confirm Password'\r\n              controlId='formGroupConfirmPassword'\r\n              className='col-md-4'\r\n              \r\n              />\r\n            \r\n          </Form.Row> */}\r\n\r\n          <Form.Row>\r\n            {/* <div className='col-md-6'> */}\r\n            {/* <Field\r\n              name='copyOfId'\r\n              component={CopyOfIdUploader}\r\n           \r\n              \r\n              /> */}\r\n              {/* <Form.Group>\r\n                <Form.Label>Copy of ID</Form.Label>\r\n                <Form.Control type='file' placeholder='Copy of ID' />\r\n              </Form.Group>\r\n            </div> */}\r\n\r\n            {/* <div className='col-md-6'> */}\r\n            {/* <Field\r\n              name='copyOfCertificateOfPractice'\r\n              component={DoctorCertUpload}\r\n             \r\n              \r\n              /> */}\r\n              {/* <Form.Group>\r\n                <Form.Label>Copy of Certificate Of Practice</Form.Label>\r\n                <Form.Control\r\n                  type='file'\r\n                  placeholder='Certificate Of Practice'\r\n                />\r\n              </Form.Group>\r\n            </div> */}\r\n          </Form.Row>\r\n\r\n          <Form.Row>\r\n            <Button\r\n              className='container col-md-4 mt-5'\r\n              type='submit'\r\n              variant='success'\r\n            >\r\n              {' '}\r\n              Add{' '}\r\n            </Button>\r\n          </Form.Row>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction validate(values) {\r\n  const error = {};\r\n\r\n  if (!values.firstname) {\r\n    error.firstname = 'Field is Required';\r\n  } else if (values.firstname) {\r\n    if (!validator.isAlpha(values.firstname)) {\r\n      error.firstname =\r\n        'Name Cannot Contain numbers,symbols or special Characters';\r\n    }\r\n  }\r\n  if (!values.middlename) {\r\n    error.middlename = 'Field is Required';\r\n  } else if (values.middlename) {\r\n    if (!validator.isAlpha(values.middlename)) {\r\n      error.middlename =\r\n        'Name Cannot Contain numbers,symbols or special Characters';\r\n    }\r\n  }\r\n  if (!values.lastname) {\r\n    error.lastname = 'Field is Required';\r\n  } else if (values.lastname) {\r\n    if (!validator.isAlpha(values.lastname)) {\r\n      error.lastname =\r\n        'Name Cannot Contain numbers,symbols or special Characters';\r\n    }\r\n  }\r\n\r\n  if (!values.password) {\r\n    error.password = 'Field is Required';\r\n  } else if (values.password) {\r\n  }\r\n  if (!values.passwordConfirm) {\r\n    error.passwordConfirm = 'Field is Required';\r\n  } else if (values.passwordConfirm) {\r\n    if (!validator.equals(values.passwordConfirm, values.password)) {\r\n      error.passwordConfirm = 'Passwords do not Match';\r\n    }\r\n  }\r\n\r\n  if (!values.phoneNumber) {\r\n    error.phoneNumber = 'Field is Required';\r\n  }\r\n  if (!values.dateOfBirth) {\r\n    error.dateOfBirth = 'Field is Required';\r\n  }\r\n  if (!values.copyOfId) {\r\n    error.copyOfId = 'Field is Required';\r\n  }\r\n  if (!values.physicalAddress) {\r\n    error.physicalAdress = 'Field is Required';\r\n  }\r\n  if (!values.email) {\r\n    error.email = 'Field is Required';\r\n  } else if (values.email) {\r\n    const validEmail = validator.isEmail(values.email);\r\n\r\n    if (!validEmail) {\r\n      error.email = 'Invalid Email';\r\n    }\r\n  }\r\n\r\n  //console.log('Error ', errors)\r\n  return error;\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'doctorSignUpForm',\r\n  destroyOnUnmount: true,\r\n  forceUnregisterOnUnmount: true,\r\n  validate,\r\n})(connect(null, { doctorSignUpActionCreator })(DoctorBiography));\r\n"]},"metadata":{},"sourceType":"module"}